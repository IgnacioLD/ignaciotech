<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Real-Time on Ignacio Loyola</title>
    <link>http://localhost:1313/tags/real-time/</link>
    <description>Recent content in Real-Time on Ignacio Loyola</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/real-time/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CountIn: Modern Android Architecture in Practice</title>
      <link>http://localhost:1313/blog/countin-android-architecture/</link>
      <pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/countin-android-architecture/</guid>
      <description>&lt;p&gt;Building CountIn was an excellent opportunity to implement modern Android architecture patterns in a real-world application. The app&amp;rsquo;s requirements - real-time synchronization, offline capability, and multi-user coordination - provided interesting technical challenges that pushed me to make thoughtful architectural decisions.&lt;/p&gt;&#xA;&lt;h2 id=&#34;architecture-overview&#34;&gt;Architecture Overview&lt;/h2&gt;&#xA;&lt;p&gt;CountIn follows clean architecture principles with clear separation of concerns across three main layers:&lt;/p&gt;&#xA;&lt;h3 id=&#34;presentation-layer&#34;&gt;Presentation Layer&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Jetpack Compose&lt;/strong&gt; for modern, declarative UI&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ViewModels&lt;/strong&gt; for lifecycle-aware state management&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Navigation Component&lt;/strong&gt; for type-safe screen transitions&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Hilt&lt;/strong&gt; for dependency injection throughout the UI layer&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;domain-layer&#34;&gt;Domain Layer&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Use Cases&lt;/strong&gt; encapsulating business logic&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Repository interfaces&lt;/strong&gt; defining data contracts&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Domain models&lt;/strong&gt; representing core business entities&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Event-driven architecture&lt;/strong&gt; for real-time updates&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;data-layer&#34;&gt;Data Layer&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Room database&lt;/strong&gt; for local persistence&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Firebase Realtime Database&lt;/strong&gt; for cloud synchronization&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Repository implementations&lt;/strong&gt; handling data orchestration&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;WorkManager&lt;/strong&gt; for background synchronization&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;real-time-synchronization-challenges&#34;&gt;Real-Time Synchronization Challenges&lt;/h2&gt;&#xA;&lt;h3 id=&#34;conflict-resolution&#34;&gt;Conflict Resolution&lt;/h3&gt;&#xA;&lt;p&gt;Multiple users incrementing/decrementing counts simultaneously required careful conflict resolution:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
